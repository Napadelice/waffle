<?xml version="1.0" encoding="utf-8"?>
<topic id="4E49F59D-374F-400b-9C28-CA231FF2B29F" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        The Waffle Spring-Security Authenticator implements Windows authentication for Spring-Security-enabled applications.
        For more information about Spring-Security see <externalLink>
          <linkUri>http://static.springsource.org/spring-security/site/</linkUri>
          <linkText>http://static.springsource.org/spring-security/site/</linkText>
        </externalLink>.
      </para>
    </introduction>
    <section address="configuration">
      <title>Configuring Spring Security</title>
      <content>
        <para>
          The following steps are required to configure a web server with the Waffle Spring-Security Authenticator and form login.
          <list class="ordered">
            <listItem>
              We'll assume that Spring-Security is configured via <localUri>web.xml</localUri> with a filter chain and a 
              Spring context loader listener. The Waffle beans configuration will be added to 
              <localUri>waffle-auth.xml</localUri>.
              <code lang="xml">
                <![CDATA[
<filter>
	<filter-name>springSecurityFilterChain</filter-name>
	<filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>
<filter-mapping>
	<filter-name>springSecurityFilterChain</filter-name>
	<url-pattern>/*</url-pattern>
</filter-mapping>
<context-param>
	<param-name>contextConfigLocation</param-name>
	<param-value>/WEB-INF/waffle-auth.xml</param-value> 
</context-param>
<listener>
	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
</listener>
                ]]>
              </code>
            </listItem>
            <listItem>
              Copy <localUri>waffle-jna.jar</localUri>, <localUri>commons-logging-1.1.1.jar</localUri>,
              <localUri>jna.jar</localUri> and <localUri>platform.jar</localUri> to the application's
              <localUri>lib</localUri> directory or copy them to your web server's <localUri>lib</localUri>, along with
              Spring and Spring-Security JARs.
            </listItem>
            <listItem>
              Declare a Waffle Windows authentication provider. This is the link between Waffle and the operating system.
              <code lang="xml">
                <![CDATA[
<bean id="waffleWindowsAuthProvider" class="waffle.windows.auth.impl.WindowsAuthProviderImpl" />
                ]]>               
              </code>
            </listItem>
            <listItem>
              Add a Waffle Spring authentication provider.
              <code lang="xml">
                <![CDATA[
<bean id="waffleSpringAuthenticationProvider" class="waffle.spring.WindowsAuthenticationProvider">
	<property name="AuthProvider" ref="waffleWindowsAuthProvider" />
</bean>
]]>
              </code>
            </listItem>
            <listItem>
              Define the Spring-Security authentication manager.
              <code lang="xml">
                <![CDATA[
<sec:authentication-manager alias="authenticationProvider">
	<sec:authentication-provider ref="waffleSpringAuthenticationProvider" />
</sec:authentication-manager>]]>
              </code>
            </listItem>
          </list>
        </para>
      </content>
    </section>
    <section address="authproviderroles">
      <title>User Roles</title>
      <content>
        <para>
          Upon successful login, Waffle adds a <newTerm>ROLE_USER</newTerm> to the list of granted authorities along with 
          user's identity and groups prefixed with <newTerm>ROLE_</newTerm>. For example, if a user is a member of the
          <newTerm>Everyone</newTerm> group, he obtains the <newTerm>ROLE_EVERYONE</newTerm> granted authority.
        </para>
      </content>
    </section>
    <section address="waffleSpringAuthenticationProvider_options">
      <title>Spring Authentication Provider Options</title>
      <content>
        <para>
          The <newTerm>waffleSpringAuthenticationProvider</newTerm> bean can be configured with the following options.
          <tableDefinition>
            <definedTerm>principalFormat</definedTerm>
            <definition>Specifies the name format for the principal.</definition>
            <definedTerm>roleFormat</definedTerm>
            <definition>Specifies the name format for the role.</definition>
            <definedTerm>allowGuestLogin</definedTerm>
            <definition>
              Allow guest login. When <literal>true</literal> and the system's Guest account is enabled,
              any invalid login succeeds as Guest.
              <alert class="note">
                <para>
                  While the default value of <literal>allowGuestLogin</literal> is true, it is recommended
                  that you disable the system's Guest account to disallow Guest login. This option is provided
                  for systems where you don't have administrative privileges.
                </para>
              </alert>
            </definition>
          </tableDefinition>
        </para>
        <para>
          <code lang="xml">
            <![CDATA[
<bean id="waffleSpringAuthenticationProvider" class="waffle.spring.WindowsAuthenticationProvider">
	<property name="AllowGuestLogin" value="false" />
	<property name="PrincipalFormat" value="fqn" />
	<property name="RoleFormat" value="both" />
	<property name="AuthProvider" ref="waffleWindowsAuthProvider" />
</bean>]]>
          </code>
        </para>
      </content>
    </section>
    <section address="demoapplication">
      <title>Waffle Spring-Security Form Login Demo</title>
      <content>
        <para>
          A demo application can be found in the Waffle distribution in the <localUri>Samples\waffle-spring-form</localUri>
          directory. Copy the entire directory into Tomcat's or Jetty's <localUri>webapps</localUri> directory and navigate to
          <ficticiousUri>http://localhost:8080/waffle-spring-form/</ficticiousUri>. Login with your Windows credentials.
        </para>
      </content>
    </section>
  </developerConceptualDocument>
</topic>